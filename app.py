import streamlit as st
from PIL import Image
import torch
import clip
import matplotlib.pyplot as plt
import numpy as np

# ============================================================
# ‚öôÔ∏è 1. Kh·ªüi t·∫°o app
# ============================================================
st.set_page_config(page_title="Zero-Shot Animal Classifier", page_icon="üêæ", layout="wide")
st.title("üêæ Zero-Shot Animal Classification with CLIP (OpenAI)")
st.write("Upload an animal image ‚Äî model will predict its species and, if cat/dog, its breed (zero-shot).")

# Bu·ªôc d√πng CPU v√¨ Streamlit Cloud kh√¥ng c√≥ GPU
device = "cpu"

# ============================================================
# üìö 2. Cache model v√† text embeddings (load lazily ƒë·ªÉ ti·∫øt ki·ªám memory)
# ============================================================
@st.cache_resource
def load_clip_and_features():
    model, preprocess = clip.load("ViT-B/32", device=device)
    
    # Species classes
    species_classes = ["cat", "dog", "cattle", "chicken", "elephant"]
    species_tokens = clip.tokenize(species_classes).to(device)
    with torch.no_grad():
        species_text_features = model.encode_text(species_tokens)
        species_text_features /= species_text_features.norm(dim=-1, keepdim=True)
    
    # S·ª≠a breed lists (swap ƒë·ªÉ ƒë√∫ng: cat_breeds l√† m√®o, dog_breeds l√† ch√≥)
    cat_breeds = ['Abyssinian', 'Bengal', 'Birman', 'Maine_Coon', 'Siamese']
    dog_breeds = ['french_bulldog', 'german_shepherd', 'golden_retriever', 'poodle', 'yorkshire_terrier']
    all_breeds = cat_breeds + dog_breeds  # Gi·ªØ all ƒë·ªÉ predict chung
    
    breed_tokens = clip.tokenize(all_breeds).to(device)
    with torch.no_grad():
        breed_text_features = model.encode_text(breed_tokens)
        breed_text_features /= breed_text_features.norm(dim=-1, keepdim=True)
    
    return model, preprocess, species_classes, species_text_features, all_breeds, breed_text_features

# ============================================================
# üß© 3. H√†m d·ª± ƒëo√°n 1 ·∫£nh
# ============================================================
def predict_single_image(img_path_or_obj, show=False):
    model, preprocess, species_classes, species_text_features, all_breeds, breed_text_features = load_clip_and_features()
    
    image = preprocess(Image.open(img_path_or_obj)).unsqueeze(0).to(device)
    with torch.no_grad():
        img_feat = model.encode_image(image)
        img_feat /= img_feat.norm(dim=-1, keepdim=True)
        sim_species = (img_feat @ species_text_features.T).squeeze(0)
        probs = sim_species.softmax(dim=0).cpu().numpy()
        top_species_idx = sim_species.topk(1).indices.item()
        predicted_species = species_classes[top_species_idx]

        predicted_breed = None
        breed_probs = None
        if predicted_species in ["dog", "cat"]:
            sim_breed = (img_feat @ breed_text_features.T).squeeze(0)
            breed_probs = sim_breed.softmax(dim=0).cpu().numpy()
            top_breed_idx = sim_breed.topk(1).indices.item()
            predicted_breed = all_breeds[top_breed_idx]

    return predicted_species, predicted_breed, probs, breed_probs

# ============================================================
# üñºÔ∏è 4. Upload ·∫£nh & d·ª± ƒëo√°n
# ============================================================
uploaded_file = st.file_uploader("Upload your animal image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    try:
        # Hi·ªÉn th·ªã ·∫£nh
        img = Image.open(uploaded_file).convert("RGB")
        st.image(img, caption="Uploaded Image", use_column_width=True)

        # D·ª± ƒëo√°n
        species, breed, species_probs, breed_probs = predict_single_image(uploaded_file)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.subheader(f"Predicted Species: **{species.capitalize()}** üß†")

        # Bi·ªÉu ƒë·ªì x√°c su·∫•t 5 lo√†i
        st.write("### Species Probability:")
        fig, ax = plt.subplots()
        ax.bar(load_clip_and_features()[2], species_probs, color="skyblue")  # species_classes t·ª´ cache
        ax.set_ylabel("Confidence")
        ax.set_ylim(0, 1)
        st.pyplot(fig)

        if breed:
            st.markdown(f"### üê∂ Predicted Breed (Zero-Shot): **{breed}**")

            # Hi·ªÉn th·ªã top-3 breed
            topk = np.argsort(breed_probs)[::-1][:3]
            st.write("Top-3 Breed Predictions:")
            for i in topk:
                st.write(f"{load_clip_and_features()[4][i]}: {breed_probs[i]*100:.2f}%")  # all_breeds t·ª´ cache

            # Bi·ªÉu ƒë·ªì x√°c su·∫•t breed
            fig2, ax2 = plt.subplots()
            ax2.barh([load_clip_and_features()[4][i] for i in topk][::-1],
                     [breed_probs[i] for i in topk][::-1],
                     color="salmon")
            ax2.set_xlabel("Confidence")
            st.pyplot(fig2)
    
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω: {str(e)}. C√≥ th·ªÉ do memory ho·∫∑c h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá. Th·ª≠ reboot app ho·∫∑c d√πng h√¨nh kh√°c.")

else:
    st.info("üëÜ Upload an image to start prediction.")